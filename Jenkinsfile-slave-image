#!groovy

def timestamp = java.time.Instant.now().toEpochMilli();
def imageFinalName = "jettyproject/jetty-build-agent:"+timestamp

pipeline {
  agent any
  options {
    durabilityHint('PERFORMANCE_OPTIMIZED')
    buildDiscarder logRotator( numToKeepStr: '30' )
  }  
  triggers {
    cron '@weekly'
  }
  stages {
    stage("Docker build and push") {
      agent { node { label 'linux' } }
      steps {
          withCredentials([usernamePassword(credentialsId: 'DockerHubPwd', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD'),
                           usernamePassword(credentialsId: 'nexus-cred', usernameVariable: 'USERNAME_NEXUS', passwordVariable: 'PASSWORD_NEXUS')]) {
//            sh '''
//              echo "{
//                "insecure-registries" : ["10.0.0.15:8083"]
//              }"
//            '''

            sh "docker login -u $USERNAME -p $PASSWORD"
            sh "docker build --no-cache --tag=jetty-build-agent:latest slave-image/"
            sh "docker tag jetty-build-agent:latest $imageFinalName"
            sh "docker push $imageFinalName"
            sh "docker logout"

            sh "docker login -u $USERNAME -p $PASSWORD 10.0.0.15:8083"
            sh "docker tag jetty-build-agent:latest 10.0.0.15:8083/$imageFinalName"
            sh "docker push 10.0.0.12:8083/$imageFinalName"
            sh "docker logout"

            script {
              def cloudName = "kubernetes-no-docker" // "kubernetes"
              def templateName = "jenkins-slave"
              def containerName = "jnlp"
              def imageName = Jenkins.instance.clouds.getByName(cloudName).templates.find { it.name.equals(templateName) }.containers.find { it.name.equals(containerName) }.image;
              echo "imageName before: $imageName"
              Jenkins.instance.clouds.getByName(cloudName).templates.find { it.name.equals(templateName) }.containers.find { it.name.equals(containerName) }.image = imageFinalName;
              Jenkins.instance.save()
              imageName = Jenkins.instance.clouds.getByName(cloudName).templates.find { it.name.equals(templateName) }.containers.find { it.name.equals(containerName) }.image;
              echo "imageName after: $imageName"
            }
          }
      }
    }
  }
}
// vim: et:ts=2:sw=2:ft=groovy
